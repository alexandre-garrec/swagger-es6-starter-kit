swagger: "2.0"
info:
  version: "0.0.1"
  title: Starter api
# during dev, should point to your local machine
host: 127.0.0.1:10012
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /user:
    # our controller name
    x-swagger-router-controller: user
    get:
      tags: [ user ]
      operationId: getAll
      description: get the users list
      # define the type of response for Success "200" and Error
      responses:
        "200":
          description: Success
          schema:
            type : array
            items:
              $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags: [ user ]
      operationId: create
      description: add a new ad to the list
      # movie info to be stored
      parameters:
        - name: data
          description: Add properties
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /ad/{id}:
    # our controller name
    x-swagger-router-controller: user
    get:
      tags: [ user ]
      operationId: getOne
      description: get ad by id
      # define the type of response for Success "200" and Error
      parameters:
        - name: id
          type: string
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags: [ user ]
      operationId: update
      description: update a user
      # define the parameters
      parameters:
        - name: id
          description: User id
          type: string
          in: path
          required: true
        - name: data
          description: User properties
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags: [ user ]
      operationId: remove
      description: delete a user
      # define the parameters
      parameters:
        - name: id
          description: Movie id
          type: string
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GeneralResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  User:
    type: object
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user description
      firstname:
        type: string
        description: user firstname
      lastname:
        type: string
        description: user firstname
      picture:
        type: string
        description: user firstname
    required:
      - email
  GeneralResponse:
    type: object
    properties:
      success:
        type: number
        description: returns 1 if successful
      description:
        type: string
        description: a short comment 
    required:
      - success
      - description
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
